version: "3.8"

services:
  db:
    image: postgres:15-alpine
    container_name: luckyspin_db
    environment:
      POSTGRES_DB: LuckySpin
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: luckyspin_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
      target: runtime
    container_name: luckyspin_backend
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./backend:/app
      - backend_media:/app/media
      - backend_static:/app/staticfiles
      - backend_logs:/app/logs
    ports:
      - "8000:8000"
    environment:
      - DJANGO_DEBUG=1
      - DJANGO_SECRET_KEY=django-insecure-dev-key-k8x@9m#p2w$$v4n5q7r&t9y*u3i6o0p-a1s2d3f4g5h6j7
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=LuckySpin
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_HOST=db
      - DB_PORT=5432
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,backend
      - FRONTEND_BASE_URL=http://localhost:3000
      - ENVIRONMENT=development
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/admin/login/')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
      target: development
    container_name: luckyspin_frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api
      - REACT_APP_WS_URL=ws://localhost:8000/ws
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - NODE_ENV=development
    depends_on:
      - backend
    stdin_open: true
    tty: true

  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
      target: runtime
    container_name: luckyspin_celery_worker
    command: celery -A backend worker -l info
    volumes:
      - ./backend:/app
      - backend_media:/app/media
      - backend_logs:/app/logs
    environment:
      - DJANGO_DEBUG=1
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=LuckySpin
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_HOST=db
      - DB_PORT=5432
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ENVIRONMENT=development
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    restart: unless-stopped

  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
      target: runtime
    container_name: luckyspin_celery_beat
    command: celery -A backend beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    environment:
      - DJANGO_DEBUG=1
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=LuckySpin
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_HOST=db
      - DB_PORT=5432
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ENVIRONMENT=development
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    restart: unless-stopped

volumes:
  db_data:
  redis_data:
  backend_media:
  backend_static:
  backend_logs:
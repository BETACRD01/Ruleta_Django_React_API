# syntax=docker/dockerfile:1.7

######## Dependencies stage ########
FROM node:18-alpine AS deps
WORKDIR /app

# Copiar archivos de dependencias
COPY package.json package-lock.json* yarn.lock* pnpm-lock.yaml* ./

# Instalar dependencias con caché
RUN --mount=type=cache,target=/root/.npm \
    if [ -f package-lock.json ]; then \
        npm ci --no-audit --no-fund; \
    elif [ -f yarn.lock ]; then \
        yarn install --frozen-lockfile; \
    elif [ -f pnpm-lock.yaml ]; then \
        npm install -g pnpm && pnpm install --frozen-lockfile; \
    else \
        npm install --no-audit --no-fund; \
    fi

######## Development stage ########
FROM node:18-alpine AS development
WORKDIR /app

ENV NODE_ENV=development

# Copiar dependencias
COPY --from=deps /app/node_modules ./node_modules

# Copiar código fuente
COPY . .

EXPOSE 3000

CMD ["npm", "start"]

######## Production build stage ########
FROM node:18-alpine AS builder
WORKDIR /app

ENV NODE_ENV=production

# Copiar dependencias
COPY --from=deps /app/node_modules ./node_modules

# Copiar código fuente
COPY . .

# Compilar aplicación
RUN npm run build

######## Production stage ########
FROM node:18-alpine AS production
WORKDIR /app

ENV NODE_ENV=production

# Instalar serve
RUN npm install -g serve

# Copiar build compilado
COPY --from=builder /app/build ./build

EXPOSE 3000

CMD ["serve", "-s", "build", "-l", "3000"]